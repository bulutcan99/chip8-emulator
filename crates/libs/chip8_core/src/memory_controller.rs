use crate::memory::Memory;
use std::fs::File;
use std::io::Read;

const HEX_DIGITS: [u8; 80] = [
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];

pub struct MemoryController {
	memory: Memory,
}

impl MemoryController {
	pub fn new(mem: Memory) -> Self {
		Self {
			memory: mem,
		}
	}

	pub fn stack_pop(&mut self) {
		self.memory.pc = self.memory.stack[(self.memory.sp - 1) as usize];
		self.memory.stack[(self.memory.sp - 1) as usize] = 0;
		self.memory.sp -= 1;
	}

	pub fn stack_push(&mut self, new_pc_addr: u16) {
		self.memory.sp += 1;
		self.memory.stack[(self.memory.sp - 1) as usize] = self.memory.pc;
		self.memory.pc = new_pc_addr
	}

	fn load_hex_digits(&mut self) {
		for i in 0..HEX_DIGITS.len() {
			self.memory.ram[i] = HEX_DIGITS[i];
		}
	}

	fn load_rom_file(&mut self, path: &str) {
		let mut byte_vec: Vec<u8> = Vec::new();
		File::open(path).unwrap().read_to_end(&mut byte_vec).unwrap();
		// 4096 (RAM size) - 200 (Reserved RAM)
		if byte_vec.len() > 3584 {
			panic!("The selected ROM size will overflow beyond the limit of RAM!")
		}
	}
}